<?php
/**
 * Items Model for a Prove Component.
 *
 * @package     Joomla.Administrator
 * @subpackage  com_prove
 *
 * @copyright   Copyright (C) 2005 - 2017 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 * @since       __DEPLOY_VERSION__
 */
namespace Joomla\Component\Workflow\Administrator\Model;

defined('_JEXEC') or die;

use Joomla\CMS\Factory;
use Joomla\CMS\MVC\Model\BaseDatabaseModel;
use Joomla\Component\Workflow\Administrator\Helper\WorkflowHelper;

/**
 * Model class for items
 *
 * @since  __DEPLOY_VERSION__
 */
class GraphModel extends BaseDatabaseModel
{
	/**
	 * Method to auto-populate the model state.
	 *
	 * This method should only be called once per instantiation and is designed
	 * to be called on the first call to the getState() method unless the model
	 * configuration flag to ignore the request is set.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  $ordering   An optional ordering field.
	 * @param   string  $direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since  __DEPLOY_VERSION__
	 */
	protected function populateState($ordering = 't.ordering', $direction = 'ASC')
	{
		$app = Factory::getApplication();

		$id = $app->input->getInt('id');

		$this->setState($this->getName() . '.id', $id);

		parent::populateState($ordering, $direction);

		// TODO: Change the autogenerated stub
	}

	/**
	 * Method to get a table object, load it if necessary.
	 *
	 * @param   string  $type    The table name. Optional.
	 * @param   string  $prefix  The class prefix. Optional.
	 * @param   array   $config  Configuration array for model. Optional.
	 *
	 * @return  \Joomla\CMS\Table\Table  A JTable object
	 *
	 * @since  __DEPLOY_VERSION__
	 */
	public function getTable($type = 'Transition', $prefix = 'Administrator', $config = array())
	{
		return parent::getTable($type, $prefix, $config);
	}

	/**
	 * Load all transitions of a workflow
	 *
	 * @return  array  An array of transitions
	 *
	 * @since  __DEPLOY_VERSION__
	 */
	public function getStates()
	{
		$query = $this->getDbo()->getQuery(true);

		$select = $query->qn(
			[
				'id',
				'title',
				'condition'
			]
		);

		$query	->select($select)
				->from($query->qn('#__workflow_states'))
				->where($query->qn('published') . ' = 1')
				->where($query->qn('workflow_id') . ' = ' . (int) $this->getState($this->getName() . '.id'))
				->order($query->qn('ordering'));

		$transitions = $this->getDbo()->setQuery($query)->loadObjectList();

		return $transitions;
	}

	/**
	 * Load all transitions of a workflow
	 *
	 * @return  array  An array of transitions
	 *
	 * @since  __DEPLOY_VERSION__
	 */
	public function getTransitions()
	{
		$query = $this->getDbo()->getQuery(true);

		$select = $query->qn(
			[
				'title',
				'from_state_id',
				'to_state_id'
			],
			[
				'title',
				'parent',
				'source'
			]
		);

		$query	->select($select)
				->from($query->qn('#__workflow_transitions'))
				->where($query->qn('published') . ' = 1')
				->where($query->qn('workflow_id') . ' = ' . (int) $this->getState($this->getName() . '.id'))
				->order($query->qn('ordering'));

		$transitions = $this->getDbo()->setQuery($query)->loadObjectList();

		return $transitions;
	}
}
